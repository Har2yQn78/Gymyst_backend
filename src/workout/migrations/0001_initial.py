# Generated by Django 5.2 on 2025-05-10 11:56

import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Exercise',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True, help_text='How to perform the exercise, tips from AI', null=True)),
                ('target_sets', models.CharField(blank=True, max_length=20, null=True)),
                ('target_reps', models.CharField(blank=True, max_length=20, null=True)),
                ('target_rest_seconds', models.PositiveIntegerField(blank=True, null=True)),
                ('target_weight_or_intensity', models.CharField(blank=True, help_text='e.g., RPE 8, 70% 1RM, bodyweight', max_length=50, null=True)),
                ('media_url', models.URLField(blank=True, null=True)),
                ('order', models.PositiveIntegerField(default=0, help_text="Order of exercise within the day's workout")),
            ],
            options={
                'ordering': ['workout_day', 'order'],
            },
        ),
        migrations.CreateModel(
            name='WorkoutDay',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day_sequence_number', models.PositiveIntegerField(help_text="Order of this workout day within the plan's active days (e.g., 1st workout, 2nd workout)")),
                ('calendar_date', models.DateField(blank=True, null=True)),
                ('day_title', models.CharField(blank=True, help_text="e.g., 'Push Day - Chest, Shoulders, Triceps' or 'Full Body A'", max_length=100)),
                ('is_rest_day', models.BooleanField(default=False)),
                ('notes', models.TextField(blank=True, null=True)),
            ],
            options={
                'ordering': ['workout_plan', 'day_sequence_number'],
            },
        ),
        migrations.CreateModel(
            name='ExerciseLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('exercise_name_logged', models.CharField(help_text='Name of the exercise performed (if not from plan or overriding)', max_length=100)),
                ('sets_data', models.JSONField(default=list, help_text="List of dicts, e.g., [{'reps': 10, 'weight': 50, 'set_number': 1}, ...]")),
                ('log_date', models.DateField(default=django.utils.timezone.now)),
                ('notes', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('planned_exercise', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='logs', to='workout.exercise')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='exercise_logs', to=settings.AUTH_USER_MODEL)),
                ('workout_day_completed', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='completed_logs', to='workout.workoutday')),
            ],
            options={
                'ordering': ['-log_date', '-created_at'],
            },
        ),
        migrations.AddField(
            model_name='exercise',
            name='workout_day',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='exercises', to='workout.workoutday'),
        ),
        migrations.CreateModel(
            name='WorkoutPlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('week_number', models.PositiveIntegerField(help_text='e.g., Week 1, Week 2 of the overall request (1-indexed)')),
                ('plan_active_date', models.DateField(help_text='The date this weekly plan becomes active for the user')),
                ('visibility', models.CharField(choices=[('VISIBLE', 'visible'), ('UPCOMING', 'upcoming'), ('ARCHIVED', 'archived')], default='UPCOMING', max_length=10)),
                ('weekly_theme', models.CharField(blank=True, help_text="e.g., 'Hypertrophy Focus - Phase 1' or 'Deload Week'", max_length=255, null=True)),
                ('generation_prompt', models.TextField(blank=True, help_text='The actual prompt sent to the LLM for this week (for debugging/auditing)', null=True)),
                ('llm_response_raw', models.JSONField(blank=True, help_text='Raw response from LLM for this week (for debugging/auditing)', null=True)),
                ('generated_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='workout_plans', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['user', 'plan_active_date', 'week_number'],
            },
        ),
        migrations.AddField(
            model_name='workoutday',
            name='workout_plan',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='days', to='workout.workoutplan'),
        ),
        migrations.CreateModel(
            name='WorkoutRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('requested_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('duration_weeks', models.PositiveIntegerField(default=4, help_text='How many weeks of plan requested')),
                ('days_per_week_preference', models.PositiveIntegerField(default=3, help_text="User's preferred number of workout days per week (e.g., 3, 4, 5)")),
                ('fitness_level_at_request', models.CharField(blank=True, max_length=50, null=True)),
                ('primary_goal_at_request', models.CharField(blank=True, max_length=100, null=True)),
                ('specific_focus_areas', models.TextField(blank=True, help_text="e.g., 'Upper body strength, core stability'. LLM will try to incorporate.")),
                ('status', models.CharField(choices=[('PENDING', 'pending'), ('GENERATING_WEEK', 'generating_week'), ('COMPLETED_WEEK', 'completed_week'), ('ALL_WEEKS_COMPLETED', 'all_weeks_completed'), ('FAILED_GENERATION', 'failed_generation'), ('USER_CANCELLED', 'user_cancelled')], default='PENDING', max_length=30)),
                ('current_week_being_generated', models.PositiveIntegerField(blank=True, help_text='Which week number is currently in process (1-indexed)', null=True)),
                ('error_message', models.TextField(blank=True, null=True)),
                ('next_generation_due_date', models.DateField(blank=True, help_text="When the next week's plan should be triggered for generation", null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='workout_requests', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-requested_at'],
            },
        ),
        migrations.AddField(
            model_name='workoutplan',
            name='source_request',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='generated_plans', to='workout.workoutrequest'),
        ),
        migrations.AlterUniqueTogether(
            name='workoutday',
            unique_together={('workout_plan', 'day_sequence_number')},
        ),
        migrations.AlterUniqueTogether(
            name='workoutplan',
            unique_together={('source_request', 'week_number')},
        ),
    ]
